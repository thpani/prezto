#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Add ~/bin and ~/.local/bin to $PATH.
export PATH="$PATH:$HOME/bin:$HOME/.local/bin"

# Setup homebrew
[[ -s /opt/homebrew/bin/brew ]] && eval "$(/opt/homebrew/bin/brew shellenv)"

# Set env
export EDITOR='vim'
export VISUAL=$EDITOR
export FZF_DEFAULT_COMMAND='fd --type f'

# Source direnv
eval "$(direnv hook zsh)"

# Source fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Bind Ctrl-R to recursively search history
bindkey "^R" history-incremental-search-backward

# Useful aliases
alias gitwdiff='git diff --word-diff'
command -v rg >/dev/null 2>&1 && alias ag='rg'
# alias ss='sshuttle -r sg1 0/0'

function apal-worktree() {
	if [ -z "$1" ]; then
		echo "Usage: $0 <branch>"
    return
  fi

  git pull
  git worktree add "../$1" -b "th/$1" unstable
  direnv allow "../$1"
  cd "../$1"
}

function git-delete-merged() {
  git checkout unstable
  git pull

  # rm merged worktrees
  # list merged worktrees
  git branch --merged unstable | grep '^+' | cut -d' ' -f2 | while IFS= read -r branch ; do
    # get worktree path
    worktree_path=$(git worktree list --porcelain | grep -B2 "^branch refs/heads/${branch}$" | grep worktree | cut -d' ' -f2)
    # rm the worktree
    git worktree remove "$worktree_path" && \
      git branch -d "$branch" && \
      echo "Deleted worktree $worktree_path."
  done

  # rm non-worktree merged branches
  branches=("${(@f)$(git branch --merged unstable | grep -v '^+' | grep -v '^* unstable$')}")
  for branch in $branches ; do
    branch=${branch##[[:blank:]]##} # trim whitespace
    git branch -d "$branch"
  done
}

# Graphviz
# dot2pdf() {
#   pdf_path=$(basename "$1" .dot).pdf
#   dot -Tpdf "$1" >"$pdf_path" && echo "$pdf_path"
# }
# dotopen() {
#   for f ; do
#     d=$(dot2pdf "$f")
#     open -a skim "$d"
#   done
# }
# dotprint() {
#   for f ; do
#     printn $(dot2pdf "$f") 1
#   done
# }

function gitignore() {
	if [ -z "$1" ]; then
		echo "Usage: $0 <language>"
		echo "  Languages: https://github.com/github/gitignore"
	else
		curl -o .gitignore https://raw.githubusercontent.com/github/gitignore/master/$1.gitignore
	fi
}

# sdkman
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
